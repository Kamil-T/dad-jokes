{"version":3,"sources":["components/Joke.js","components/JokeList.js","App.js","serviceWorker.js","index.js"],"names":["Joke","props","state","this","votes","className","onClick","upvote","style","borderColor","getColor","downvote","text","Component","JokeList","jokes","JSON","parse","window","localStorage","getItem","loading","seenJokes","Set","map","j","id","handleClick","bind","length","getJokes","numJokesToGet","Axios","get","headers","Accept","res","has","data","push","joke","key","uuid","setState","st","setItem","stringify","alert","change","sort","a","b","alt","src","handleVote","defaultProps","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e1a6533d.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './Joke.css'\n\nclass Joke extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {}\n  }\n\n  getColor() {\n    if (this.props.votes >= 15) {\n      return '#4CAF50'\n    } else if (this.props.votes >= 12) {\n      return '#8BC34A'\n    } else if (this.props.votes >= 9) {\n      return '#CDDC39'\n    } else if (this.props.votes >= 6) {\n      return '#FFEB3B'\n    } else if (this.props.votes >= 3) {\n      return '#FFC107'\n    } else if (this.props.votes >= 0) {\n      return '#FF9800'\n    } else {\n      return '#F44336'\n    }\n  }\n\n  render() {\n    return (\n      <div className='Joke'>\n        <div className='Joke-buttons'>\n          <i className='fas fa-arrow-up' onClick={this.props.upvote} />\n          <span className='Joke-votes' style={{ borderColor: this.getColor() }}>\n            {this.props.votes}\n          </span>\n          <i className='fas fa-arrow-down' onClick={this.props.downvote} />\n        </div>\n        <div className='Joke-text'>\n          <div>{this.props.text}</div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Joke\n","import React, { Component } from 'react'\nimport Axios from 'axios'\nimport uuid from 'uuid/v4'\nimport './JokeList.css'\nimport Joke from './Joke'\n\nclass JokeList extends Component {\n  static defaultProps = {\n    numJokesToGet: 10\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      jokes: JSON.parse(window.localStorage.getItem('jokes')) || [],\n      loading: false\n    }\n    this.seenJokes = new Set(this.state.jokes.map(j => j.id))\n    this.handleClick = this.handleClick.bind(this)\n  }\n\n  componentDidMount() {\n    if (this.state.jokes.length === 0) this.getJokes()\n  }\n\n  async getJokes() {\n    try {\n      let jokes = []\n      while (jokes.length < this.props.numJokesToGet) {\n        let res = await Axios.get('https://icanhazdadjoke.com/', {\n          headers: { Accept: 'application/json' }\n        })\n        if (!this.seenJokes.has(res.data.id)) {\n          jokes.push({\n            id: res.data.id,\n            text: res.data.joke,\n            key: uuid(),\n            votes: 0\n          })\n        }\n      }\n      this.setState(\n        st => ({\n          loading: false,\n          jokes: [...st.jokes, ...jokes]\n        }),\n        () =>\n          window.localStorage.setItem('jokes', JSON.stringify(this.state.jokes))\n      )\n    } catch (e) {\n      alert(e)\n      this.setState({ loading: false })\n    }\n  }\n\n  handleVote(id, change) {\n    this.setState(\n      st => ({\n        jokes: st.jokes.map(j =>\n          j.id === id ? { ...j, votes: j.votes + change } : j\n        )\n      }),\n      () =>\n        window.localStorage.setItem('jokes', JSON.stringify(this.state.jokes))\n    )\n  }\n\n  handleClick() {\n    this.setState({ loading: true }, this.getJokes)\n  }\n\n  render() {\n    if (this.state.loading) {\n      return (\n        <div className='JokeList-spinner'>\n          <i className='far fa-8x fa-laugh fa-spin' />\n          <h1 className='JokeList-title'>Loading...</h1>\n        </div>\n      )\n    }\n\n    let jokes = this.state.jokes.sort((a, b) => b.votes - a.votes)\n\n    return (\n      <div className='JokeList'>\n        <div className='JokeList-sidebar'>\n          <h1 className='JokeList-title'>Dad Jokes</h1>\n          <img\n            alt=''\n            src='https://assets.dryicons.com/uploads/icon/svg/8927/0eb14c71-38f2-433a-bfc8-23d9c99b3647.svg'\n          />\n          <button className='JokeList-getmore' onClick={this.handleClick}>\n            New Jokes\n          </button>\n        </div>\n        <div className='JokeList-jokes'>\n          {jokes.map(j => (\n            <Joke\n              id={j.id}\n              key={j.key}\n              votes={j.votes}\n              text={j.text}\n              upvote={() => this.handleVote(j.id, 1)}\n              downvote={() => this.handleVote(j.id, -1)}\n            />\n          ))}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default JokeList\n","import React from 'react'\nimport './App.css'\nimport JokeList from './components/JokeList'\n\nfunction App() {\n  return (\n    <div className='App'>\n      <JokeList />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}